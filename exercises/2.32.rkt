#lang racket

(define (identity x) x)

(define (subsets s)
  (display "s: ")
  (display s)
  (newline)
  (display "(car s): ")
  (if (null? s)
      (display "n/a")
      (display (car s)))
  (newline)
  (if (null? s)
      '()
      (let ((rest (subsets (cdr s))))
        (display "rest: ")
        (display rest)
        (newline)
        (append rest (map ((lambda (y) (lambda (x)
                            (newline)
                            (display x)
                            (display "y = ")
                            (display y)
                            (cons y x))) (car s))
                          rest)))))

(define (mapper whole)
  (lambda (rest)
    (newline)
    (display "whole: ")
    (display whole)
    (newline)
    (display "rest: ")
    (display rest)))

(define my-list (list 1 2))

(subsets my-list)