a)

(define (outline-painter frame)
	(let ((origin (origin-frame frame))
				(e1 (edge1-frame frame))
				(e2 (edge2-frame frame)))
		(let ((left (make-segment origin e1))
					(top (make-segment e1 (add-vect e1 e2)))
					(right (make-segment (add-vect e1 e2) e2))
					(bottom (make-segment e2 origin)))
			((segments->painter (list left top right bottom)) frame))))

b)

(define (x-painter frame)
	(let ((origin (origin-frame frame))
				(e1 (edge1-frame frame))
				(e2 (edge2-frame frame)))
		(let ((topleft->bottomright (make-segment e1 e2))
					(bottomleft->topright (make-segment origin (add-vect e1 e2))))
			((segments->painter (list topleft->bottomright
																bottomleft->topright)) frame))))

c)

(define (diamond-painter frame)
	(let ((e1 (edge1-frame frame))
				(e2 (edge2-frame frame)))
		(let ((half-e1 (scale-vect e1 0.5))
					(half-e2 (scale-vect e2 0.5)))
			(let ((northwest (make-segment half-e1 (add-vect e1 half-e2)))
						(northeast (make-segment (add-vect e1 half-e2) (add-vect e2 half-e1)))
						(southeast (make-segment (add-vect e2 half-e1) half-e2))
						(southwest (make-segment half-e2 half-e1)))
				((segments->painter (list northwest northeast southeast southwest)) frame)))))

d)

(define (wave frame)
	(let ((x (edge2-frame frame))
				(y (edge1-frame frame)))
		(define (point x-factor y-factor) ;factors unitized from division by 32
			(add-vect (scale-vect x (/ x-factor 32))
								(scale-vect y (/ y-factor 32))))
		(let ((a (point 0 27))
					(b (point 5 19))
					(c (point 9 21))
					(d (point 13 21))
					(e (point 11 27))
					(f (point 13 32))
					(g (point 19 32))
					(h (point 21 27))
					(i (point 19 21))
					(j (point 24 21))
					(k (point 32 11))
					(l (point 32 5))
					(m (point 19 15))
					(n (point 24 0))
					(o (point 19 0))
					(p (point 16 10))
					(q (point 13 0))
					(r (point 8 0))
					(s (point 11 16))
					(t (point 9 19))
					(u (point 5 13))
					(v (point 0 21)))
			((segments->painter (list (make-segment a b)
																(make-segment b c)
																(make-segment c d)
																(make-segment d e)
																(make-segment e f)
																(make-segment g h)
																(make-segment h i)
																(make-segment i j)
																(make-segment j k)
																(make-segment l m)
																(make-segment m n)
																(make-segment o p)
																(make-segment p q)
																(make-segment r s)
																(make-segment s t)
																(make-segment t u)
																(make-segment u v)) frame)))))

; following are in scope...

(define (make-vect x y) (list x y))
(define (xcor-vect vect) (car vect))
(define (ycor-vect vect) (cadr vect))

(define (add-vect v1 v2)
  (make-vect (+ (xcor-vect v1) (xcor-vect v2))
             (+ (ycor-vect v1) (ycor-vect v2))))

(define (scale-vect v s)
  (make-vect (* (xcor-vect v) s)
             (* (ycor-vect v) s)))

(define (sub-vect v1 v2)
  (add-vect v1 (scale-vect v2 -1)))

(define (make-frame origin edge1 edge2)
  (list origin edge1 edge2))

(define (origin-frame frame) (car frame))
(define (edge1-frame frame) (cadr frame))
(define (edge2-frame frame) (caddr frame))

(define (frame-coord-map frame)
  (lambda (v)
    (add-vect
     (origin-frame frame)
     (add-vect (scale-vect (xcor-vect v)
                           (edge1-frame frame))
               (scale-vect (ycor-vect v)
                           (edge2-frame frame))))))

(define (make-segment vect1 vect2) (list vect1 vect2))
(define (start-segment s) (car s))
(define (end-segment s) (cadr s))

(define (segments->painter segment-list)
  (lambda (frame)
    (for-each
     (lambda (segment)
       (draw-line
        ((frame-coord-map frame) (start-segment segment))
        ((frame-coord-map frame) (end-segment segment))))
     segment-list)))