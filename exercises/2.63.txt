a)
The two procedures produce the same result for every tree.
They produce sorted lists. Specifically, each list is '(1 3 5 7 9 11).
b)
Expanding the procedures across the first tree in figure 2.16 should yield
insight into this.

Abbreviations:
tl1 = tree->list-1
tl2 = tree->list-2
ap  = append
cl  = copy-to-list
t#  = tree whose entry is #

The number above the expansion represents the steps taken to arrive
at that stage of the expansion.

e.g. :
0
(+ 2 4 (* 7 9) (* 2 1))
2
(+ 2 4 63 2)
1
71

Expansion 1:

0
(tl1 t7)
1
(ap (tl1 t3)
		(cons 7 (tl1 t9)))
2
(ap (ap (tl1 t1)
				(cons 3 (tl1 t5)))
		(cons 7 (ap (tl1 nil)
								(cons 9 (tl1 t11)))))
4
(ap (ap (ap (tl1 nil)
						(cons 1 (tl1 nil)))
				(cons 3 (ap (tl1 nil)
										(cons 5 (tl1 nil)))))
		(cons 7 (ap nil
								(cons 9 (ap (tl1 nil)
														(cons 11 (tl1 nil)))))))
6
(ap (ap (ap nil
						(cons 1 nil))
				(cons 3 (ap nil
										(cons 5 nil))))
		(cons 7 (ap nil
								(cons 9 (ap nil
														(cons 11 nil))))))
3
(ap (ap (ap nil
						'(1))
				(cons 3 (ap nil
										'(5))))
		(cons 7 (ap nil
								(cons 9 (ap nil
														'(11))))))
3
(ap (ap '(1)
				(cons 3 '(5)))
		(cons 7 (ap nil
								(cons 9 '(11)))))
2
(ap (ap '(1)
				'(3 5))
		(cons 7 (ap nil
								'(9 11))))
2
(ap '(1 3 5)
		(cons 7 '(9 11)))
1
(ap '(1 3 5)
		'(7 9 11))
1 (3 for append's magnitude)
'(1 3 5 7 9 11)

total steps = 27

Expansion 2:

0
(tl2 t7)
1
(cl t7 nil)
1
(cl t3 (cons 7
						 (cl t9 nil)))
1
(cl t3 (cons 7
						 (cl nil (cons 9
													 (cl t11 nil)))))
1
(cl t3 (cons 7
						 (cl nil (cons 9
													 (cl nil (cons 11
																				 (cl nil nil)))))))
1
(cl t3 (cons 7
						 (cl nil (cons 9
													 (cl nil (cons 11
																				 nil))))))
1
(cl t3 (cons 7
						 (cl nil (cons 9
													 (cl nil '(11))))))
1
(cl t3 (cons 7
						 (cl nil (cons 9
													 '(11)))))
1
(cl t3 (cons 7
						 (cl nil '(9 11))))
1
(cl t3 (cons 7
						 '(9 11)))
1
(cl t3 '(7 9 11))
1
(cl t1 (cons 3
						 (cl t5 '(7 9 11))))
1
(cl t1 (cons 3
						 (cl nil (cons 5
													(cl nil '(7 9 11))))))
1
(cl t1 (cons 3
						 (cl nil (cons 5
													 '(7 9 11)))))
1
(cl t1 (cons 3
						 (cl nil '(5 7 9 11))))
1
(cl t1 (cons 3
						 '(5 7 9 11)))
1
(cl t1 '(3 5 7 9 11))
1
(cl nil (cons 1
							(cl nil '(3 5 7 9 11))))
1
(cl nil (cons 1
							'(3 5 7 9 11)))
1
(cl nil '(1 3 5 7 9 11))
1
'(1 3 5 7 9 11)

total steps = 20

tree->list2 has a slower growth (is more efficient) than tree->list1