a) adding eyes
(define (wave frame)
	(let ((x (edge2-frame frame))
				(y (edge1-frame frame)))
		(define (point x-factor y-factor) ;factors unitized from division by 32
			(add-vect (scale-vect x (/ x-factor 32))
								(scale-vect y (/ y-factor 32))))
		(let ((a (point 0 27))
					(b (point 5 19))
					(c (point 9 21))
					(d (point 13 21))
					(e (point 11 27))
					(f (point 13 32))
					(g (point 19 32))
					(h (point 21 27))
					(i (point 19 21))
					(j (point 24 21))
					(k (point 32 11))
					(l (point 32 5))
					(m (point 19 15))
					(n (point 24 0))
					(o (point 19 0))
					(p (point 16 10))
					(q (point 13 0))
					(r (point 8 0))
					(s (point 11 16))
					(t (point 9 19))
					(u (point 5 13))
					(v (point 0 21))
					(eye-a (point 14 30))
					(eye-b (point 16 30))
					(eye-c (point 18 30))
					(eye-d (point 18 28))
					(eye-e (point 16 28))
					(eye-f (point 14 28))
					(eye-g (point 15 28))
					(eye-h (point 15 29))
					(eye-i (point 16 29))
					(eye-j (point 17 28))
					(eye-k (point 17 29))
					(eye-l (point 18 29)))
			((segments->painter (list (make-segment a b)
																(make-segment b c)
																(make-segment c d)
																(make-segment d e)
																(make-segment e f)
																(make-segment g h)
																(make-segment h i)
																(make-segment i j)
																(make-segment j k)
																(make-segment l m)
																(make-segment m n)
																(make-segment o p)
																(make-segment p q)
																(make-segment r s)
																(make-segment s t)
																(make-segment t u)
																(make-segment u v)
																(make-segment eye-a eye-c)
																(make-segment eye-c eye-d)
																(make-segment eye-d eye-f)
																(make-segment eye-f eye-a)
																(make-segment eye-b eye-e)
																(make-segment eye-g eye-h)
																(make-segment eye-h eye-i)
																(make-segment eye-j eye-k)
																(make-segment eye-k eye-l)) frame)))))

b) using one copy of up-split and right-split images

(define null-painter null)

(define (corner-split painter n)
  (if (= n 0)
      painter
      (let ((top-left (up-split painter (- n 1)))
            (bottom-right (right-split painter (- n 1)))
            (corner (corner-split painter (- n 1))))
        (beside (below painter top-left)
                (below bottom-right corner)))))

c) shrinking inward

(define (square-limit painter n)
  (let ((combine4 (square-of-four flip-vert rotate180
                                  identity flip-horz)))
    (combine4 (corner-split painter n))))